#
# ENV VARIABLES:
#   CACHE_VERSION:
#     change this version when you need to trigger a global cache refresh on the ci,
#     use case is: we move from node v9 to node v10 and we need to make sure the binaries are recompiled.
#     currently "v1" in circleci.
#   FIREBASE_SERVICE_ACCOUNT:
#     contains the service account credentials for the blockframes-ci project.
#     use case is: we want to use the firebase admin SDK and trigger deploys.
#     /!\ secret value.
#
version: 2.1
orbs:
  do-exclusively: miyajan/do-exclusively@0.1.0
executors:
  blockframes-ci:
    docker:
      - image: blockframes/ci:latest
    working_directory: ~/repo
jobs:
  build:
    executor: blockframes-ci
    environment:
      - ENV: "ci"
      - NODE_OPTIONS: "--max_old_space_size=4096"
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-{{ .Environment.CACHE_VERSION }}
      - run: rm -rf node_modules/ganache-core/node_modules/web3-providers-ws/node_modules/websocket/.git
      - run: npm install
      - run: ./node_modules/.bin/cypress install
      - save_cache:
          paths:
            - node_modules
            - ~/.cache/Cypress
          key: dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
      - run: cp env/env.ci.ts env/env.ts # required for the typechecking & file rewrite to work
      - run: npm run build:all
      - persist_to_workspace:
          root: ~/repo
          paths:
            - node_modules/
            - dist/
            - env/
      - persist_to_workspace:
          root: ~/.cache
          paths:
            - Cypress
  lint:
    executor: blockframes-ci
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: cp -R ~/build/* ./
      - run: npm run lint
  test:
    executor: blockframes-ci
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: cp -R ~/build/* ./
      - run: echo "${FIREBASE_SERVICE_ACCOUNT}" > creds.json
      - run: npm run test
  test-e2e:
    executor: blockframes-ci
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
      - ENV: "ci"
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: cp -R ~/build/* ./
      - run: mkdir -p ~/.cache/ && cp -R ~/build/Cypress ~/.cache
      - run: echo "${FIREBASE_SERVICE_ACCOUNT}" > creds.json
      - do-exclusively/do-exclusively:
          token: $CIRCLE_TOKEN
          command: |
            npm install --save-dev firebase-tools &&
            npx firebase use ci &&
            ENV=ci npx firebase deploy --force --token "${FIREBASE_CI_TOKEN}" &&
            ENV=ci npm run e2e --headless
      - store_artifacts:
          name: Uploading screenshots
          path: ~/repo/dist/out-tsc/apps/
## For future reference, how to deploy to docker:
##   Do not forget the DOCKER_PASS and DOCKER_USER env variables
#  deploy:
#    executor: blockframes-ci
#    steps:
#      - checkout
#      - attach_workspace:
#          at: ~/build
#      - run: cp -R ~/build/* ./
#      - setup_remote_docker:
#          docker_layer_caching: true
#      - run:
#          name: Build and push the eth-events Server
#          command: |
#            ./node_modules/.bin/ng build eth-events-server
#            docker build -t lsenta/eth-events-server:$CIRCLE_BRANCH .
#            echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
#            docker push lsenta/eth-events-server:$CIRCLE_BRANCH
workflows:
  version: 2.1
  build-test-deploy:
    jobs:
      - build
      - lint:
          requires:
            - build
      - test:
          requires:
            - build
      - click-to-run-e2e:
          type: approval
      - test-e2e:
          requires:
            - click-to-run-e2e
            - test
            - lint
#      - request-deploy:
#          type: approval
#          requires:
#            - lint
#            - test
#      - deploy:
#          requires:
#            - request-deploy
